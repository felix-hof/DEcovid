% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/holidays.R
\name{get_holidays}
\alias{get_holidays}
\title{Get holiday data from appfield.net}
\usage{
get_holidays(
  time_res = NULL,
  spat_res = NULL,
  age_res = NULL,
  cache_dir = NULL,
  enforce_cache = FALSE
)
}
\arguments{
\item{time_res}{A \code{character} vector of length 1 indicating the temporal resolution of the data.
Accepted values are either \code{"daily"} or \code{"weekly"}.}

\item{spat_res}{A \code{numeric} vector of length 1 indicating the spatial resolution of the data.
Accepted values are \code{0}, \code{1}, \code{2} and \code{3}. Corresponds to the respective NUTS level.}

\item{age_res}{A \code{character} vector of length 1 indicating whether or not the data should be stratified by
age groups. Accepted values are \code{"age"} and \code{"no_age"}.}

\item{cache_dir}{This argument indicates the path to the
desired cache directory. Defaults to \code{NULL}.
The desired cache directory is determined according to the following hierarchy:
\enumerate{
\item{If \code{cache_dir} defined by user: Caches files to user defined directory.}
\item{If \code{cache_dir == NULL} (default): check if \code{getOption("DEcovid_cache_dir")} is
defined and use this as cache directory.}
\item{If \code{getOption("DEcovid_cache_dir")} undefined: Use \code{tempdir()} as
cache directory.}
}
If you would like to always use the same cache directory, the simplest way to do so is
to run the following line of code: \code{options(DEcovid_cache_dir = "path/to/your/cache/directory")}.
Afterwards you can just ignore the \code{cache_dir} argument as it always will use the path you set in
the options.}

\item{enforce_cache}{Either \code{TRUE} or \code{FALSE} (default). If \code{TRUE}, a cached version
of the data set is loaded. If there is no cached version, the function returns an error. If \code{FALSE},
the function returns a cached version if the data set is not older than a usual update cycle of the remote
source. Otherwise, the data is fetched from remote sources.}
}
\value{
If \code{time_res}, \code{spat_res} and \code{age_res} are all \code{NULL}, the function returns a \code{tibble} with
columns \code{date}, \code{region} and \code{value} (contains the binary holiday indicator). Otherwise,
the function expands the data to also include a column \code{age} which contains age groups and summarises it to the desired
dimension resolutions.
}
\description{
Holiday data is scraped from \insertCite{DEcovid:holidays2020}{DEcovid}, \insertCite{DEcovid:holidays2021}{DEcovid}, and \insertCite{DEcovid:holidays2022}{DEcovid}.
It is available on Bundesland (NUTS 1) resolution. The data is processed such that binary indicators are created for each NUTS 1 region where 1 denots a day being a holiday.
Subsequently, the data is either expanded to fit lower smaller resolution (NUTS 2 or NUTS 1). Aggregation to the NUTS 0 level is done by calculating a population weighted average.
The weights are retrieved through \code{\link[DEcovid]{get_population}}. Therefore, on the NUTS 0 level, the result is not a binary indicator anymore but a value between 0 and 1.
Aggregation over time is implemented by summing up the indicators across the different strata. The result of weekly aggregated values is thus not a binary indicator anymore.
}
\examples{
holidays <- get_holidays()
holidays <- get_holidays(time_res = "weekly", spat_res = 0L, age_res = "no_age")

}
\references{
\insertRef{DEcovid:holidays2020}{DEcovid}
\insertRef{DEcovid:holidays2021}{DEcovid}
\insertRef{DEcovid:holidays2022}{DEcovid}
}
